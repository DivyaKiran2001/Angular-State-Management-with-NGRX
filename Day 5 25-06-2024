Day 5 

25-06-2024

NGRX Effects Tutorial

------------------------ product.action.ts ---------------

import {createAction,props} from '@ngrx/store';
import {IProduct} from '../../shared/models/product.interface';

export const loadProduct = createAction('[Product Component] loadProduct');

export const loadProductSuccess = createAction('[Product Component] loadProductSuccess',props<{products:IProduct[]}>());

export const loadProductFailure = createAction('[Product Component] loadProductFailure',props<{errorMessage: string}>());


/********** CREATING EFFECTS *********/

---------------------- product.effect.ts ------------------------------

import {Injectable,inject} from "@angular/core";
import {ProductApiService} from "../../shared/services/product-api.service";
import {Actions} from "@ngrx/effects";


You have to install the package to use Effects in NGRX

command : npm i @ngrx/effects

@Injectable()
export class ProductEffect{
 private api=inject(ProductApiService);
 action$ = inject(Actions);
 
 loadProducts$ = createEffect(() =>
  this.action$.pipe(
   ofType(ProductActions.loadProduct),
   switchMap(() =>
    this.api.getProducts().pipe(
     map((res) => ProductActions.loadProductSuccess({product:res})),
     catchError((error: {message:string}) =>
      of(
       ProductActions.loadProductFailure({
         errorMessage: 'Fail to load products',
        }
       )
      )
    )
   )
  )

 );
}



-------------------- product.reducer.ts --------------

import {createReducer,on} rom '@ngrx/store';
import {IProduct} from '../../shared/models/product.inteface';
impor * as ProductActions from './product.action';

export interface ProductState {
 products: IProduct[];
 error: string | null;
}

export const intialProductState:ProductState = {
 products:[],
 error:null
};


export const ProductReducer = createReducer (
 initialProductState,
 on(ProductActions.loadProductSuccess, (state,{products}) => ({
  ...state,
  products,
  error:null,
 })),
 on(ProductActions.loadProductFailure, (state,{errorMessage}) => ({
  ...state,
  error: errorMessage,
 })),
 
);

---------------- product.selector.ts -----------------

import {createFeatureSelector,createSelector} from "@ngrx/store";
import {ProductState} from "./product.reducer";

export const selectProductFeature = createFeatureSelector<ProductState>('product');

export const selectAllProducts = createSelector(
 selectProductFeature,
 (state: ProductState) => state.products
)

export const selectProductError = createSelector(
 selectProductFeature,
 (state: ProductState) => state.error
)


------------------------- products.component.ts --------------------

export class ProductsComponent implements OnInit {
  ............

  constructor(private store: Store<{cart : {products:IProduct[]}}>) {
   this.store.dispatch(ProductActions.loadProduct());
   this.products$ = this.store.select(ProductSelectors.selectAllProducts);
   this.error = this.store.select(ProductSelectors.selectProductError);
  }
}


 



